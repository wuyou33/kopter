USER GUIDE

Python&DIAdem Kopter Data Analysis Tool
    
    -> written by Alejandro Valverde LÃ³pez

-> DIAdem is used to extract the data in .csv format 
-> A python program does the post-processing of the data saved by DIAdem

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
PYTHON INSTALLATION STEPS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1) Software installation
Install latest python release from https://www.python.org/. Preferably install it with admin rights. During the installation steps, 
make sure to add "python" to the system environment variables. If the installation is completed and "python" was not included into 
the environment variables, this need to be manually added posteriorly.

2) Packages installation:
In CMD type: python -m pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DIADEM CODE EXECUTION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
As part of the present tool, DIAdem is used to extract the data and save it in a format which can be read by Python (.csv).
To run DIAdem more efficiently, a VBS (Visual Basic Script) can be executed from DIAdem. The following files are needed to execute 
the DIAdem script:

    -> [1] Main file: "main_DIAdem_extractData.vbs" 
    This file contains the main script. It loads its input information from the other scripts. It loads the data, performs a 
    re-sampling operation, if applicable; and saves the variables in the .csv format. This files shall be not modified by the user.

    -> [2] Definition of input files to import: "testToImport.vbs"
    Defines which execution input file [3], or files, which are going to be imported.

    -> [3] Input file: "[anyName].vbs"
    Contains the relevant information of the test which data is going to be extracted. The file "template_VBS.vbs" can be followed 
    to find indications on how to write this input file.

For each test new execution of the DIAdem script code, the following steps shall be followed:

    1) Create an input file [3], following the guidance included in "template_VBS.vbs".
    2) Modify the variable "filesNamesDataInput" in the file [2] so that includes the name of the file [3].
    3) Execute file [1] from DIAdem. Upon successful execution, a message window with the sentence "Execution finished" 
    will be displayed.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
PYTHON PROGRAM EXECUTION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Program needs to be executed via the command window. Type:

    -> python main.py [-options]

Example: python main.py -f filesToLoad_gauges_P3_FTI.txt -n f -m rs -o f -s f,t -a f -c f -w f -l t -r 99-FT25 -v ENG_TMP_CPT_AIR

The [-options] are written one after each other, separated by spaces. They can be written in any order. The available options are of two kinds:

    -> Group A:
    These are used to load the input parameters to the program.

        -> -f, -fileName:
        The input to this option is a test with the name of the file including the .txt extension. This file contains 
        all the addresses of all the files containing data from the actuator. Additionally, they allow to input additional 
        information for each of the variables of the test. They need to be stored in a folder named 'InputFiles'. In order
        to write this file, the template '' can be used.
        Example values: 'filesToLoad_general_TRbladeholder.txt', 'filesToLoad_actuator_OCLoad1.txt'

        -> -v, -variables:
        Indication of the test variables to be loaded, separated by comas. Examples:
            -> -v PitchLinkFlexible,PitchLinkMain
            -> -v CNT_DST_COL,CNT_DST_LAT,CNT_DST_LNG,CNT_DST_BST_COL,CNT_DST_BST_LAT,CNT_DST_BST_LNG
            -> -v BendingMoment,MyBlade,MyLoadcell,MzBlade,CF

        -> -m, -magnitudes:
        Indicates the data magnitudes to be loaded, separated by comas. Examples:
            -> -m rs : Loading of re-sampled data, unmodified
            -> -m di : Loading of re-sampled differentiated data, unmodified
            -> -m lp0.1 : Loading of the low-pass filtered data with 0.1Hz cut-off frequency
            -> -m hp0.1 : Loading of the high-pass filtered data with 0.1Hz cut-off frequency

        -> -r, -rangeFileID:
        Indication of the range of test steps/runs to be loaded, separated by comas. Examples:
            -> -r 7,8
            -> -r 3-SN002-1.3,10-SN0012-1.3,8-SN002-2.4
            -> -r 31-FT07,32-FT07,33-FT07,34-FT08,35-FT09,36-FT09,37-FT09

        -> -c, -correctionFilter:
        Offset correction to be applied to the filtered data. Sums the indicated quantity to the filter data. Examples:
            -> -c f : Do not to apply correction. This is the default value if the option is omitted in the program execution.
            -> -c 81.15 : Adds 81.15 to all the data points of the low-pass data and -81.15 to the high-pass data imported
            -> -c -81.15 : Adds -81.15 to all the data points of the low-pass data and 81.15 to the high-pass data imported

    -> Group B:
    These are used to control the way the code is executed. In most of the cases, they allow two inputs: to enable 
    the option, then 'true' or 't' can be written. On the other hand, to disable the option, one can write 'false' or 'f'

        -> -s, -saveFigure:
        This parameter defines what to do with the plots created. The first position of this parameter indicates whether to 
        save the plots in the working folder and the second position indicates whether the plots should be shown in the screen 
        or not. Possible values:
            -> -s f,f : Plots are not saved nor shown.
            -> -s f,t : Plots are not saved but shown. This is the default value if the option is omitted in the program execution.
            -> -s t,f : Plots are saved but not shown.
            -> -s t,t : Plots are saved and shown.

        -> -n, -axisArrangementOption:
        Enables the possibility to split the figures into multiple plots with a shared y-axis. Possible values:
            -> -n 1 : One new figure will be created per variable.
            -> -n 2 : All the variables will be shown in a single plot with multiple axes, one per variable. 
            -> -n 3 : If all the input variables are expressed in the same physical units, then the results will be plotted 
            in a single axis, with different lines for each variable.
            -> -n 4 : Two variables will be plotted in a single figure, one against each other.

        -> -o, -testOrder:
        This parameter defines whether a reference of the loads prescribed in the Test Order shall be included in the resulting plots.
        The value of the order values shall have been defined in the input file. Possible values:
            -> -o t : Plot reference of the Test Order prescribed loads.
            -> -o f : Do not plot reference of the Test Order prescribed loads. This is the default value if the parameter is omitted 
            in the program execution.

        -> -a, -additionalCals:
        This parameter allows the program to execute specific code lines which have been created to give an answer to particular  data 
        analysis tasks. During normal operation, this option has to be disabled. Possible values:
            -> -n [1,2,4,5,...] : Each number executes one particular portion of the code. For example:
                --> 16: Show force fighting for flight test.
                --> 17: Show exceedance from FTI in collective force for the actuator.
            -> -n f : Normal operation. This is the default value if the parameter is omitted in the program execution.

        -> -w, -writeStepResultsToFileFlag:
        When this option is enabled, the program will create one file per variable with the maximum, mean and minimum values recorded 
        during each of the computed steps. Possible values:
            -> -w t : Enable the output of a summary file per variable.
            -> -w f : Disable the output of a summary file per variable. This is the default value if the parameter is omitted in the program execution.

        -> -l, -divisionLineForPlotsFlag:
        When this option is enabled, the program will draw red dashed lines to define the division between consecutive test steps in
        the main figure. Possible values:
            -> -l t : Draw division line between test steps.
            -> -l f : Do not draw division line between test steps. This is the default value if the parameter is omitted in the program execution.

        -> -g, -dataPartitionFlag:
        When this option is enabled, the program perform a data partition operation on the loaded data. Only the data corresponding to 
        the specified time slots will be plotted. In the file containing the information for the test, the time slots need to be defined.
        This is done for each step with the syntax : 'segment__[step name] : [time slots]'. The input [time slots] is divided with ';' for 
        each time slot and this are in turn divided by ',' between the first and the second time defining each of the slots. 
        For example: 'segment__10-SN0012-1.3 : 10, 100; 200, 650; 775, 875'. Possible values:
            -> -l t : Perform data partition according to what it has been defined in the input file for each step.
            -> -l f : Leave data as it is. This is the default value if the parameter is omitted in the program execution.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%